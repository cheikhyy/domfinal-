
### Qu‚Äôest-ce que le DOM ?
Le **DOM** (Document Object Model) est une repr√©sentation sous forme d‚Äôarbre de tous les √©l√©ments HTML d‚Äôune page web. Chaque √©l√©ment (balise HTML) devient un **n≈ìud** dans cet arbre, ce qui permet √† JavaScript d‚Äôacc√©der, modifier, ajouter ou supprimer dynamiquement du contenu.

### Exemple : Afficher la structure du document
```html
<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Document</title>
  <script>
    console.log(document); // Affiche l'objet DOM dans la console
  </script>
</head>
<body>
  <h1>Hello DOM</h1>
</body>
</html>
```

---

## üîç Partie 2 : Acc√©der aux √©l√©ments du DOM

### 1. `document.querySelector()`
Renvoie le **premier √©l√©ment** qui correspond au s√©lecteur CSS donn√©.

#### Syntaxe :
```js
let element = document.querySelector('h1');
```

#### Exemple :
```html
<!-- index.html -->
<h1 id="main-title">Bienvenue !</h1>
<script>
  let titre = document.querySelector('#main-title');
  console.log(titre.textContent); // Affiche: Bienvenue !
</script>
```

### 2. `document.getElementById()`
Renvoie l‚Äô√©l√©ment avec un **ID** sp√©cifique.

#### Syntaxe :
```js
let el = document.getElementById('id');
```

#### Exemple :
```html
<!-- index.html -->
<p id="intro">Ceci est une introduction.</p>
<script>
  let paragraphe = document.getElementById('intro');
  console.log(paragraphe.textContent);
</script>
```

### 3. `document.querySelectorAll()`
Renvoie une **NodeList** statique de tous les √©l√©ments correspondant √† un s√©lecteur CSS.

#### Syntaxe :
```js
let elements = document.querySelectorAll('span');
```

#### Exemple :
```html
<!-- index.html -->
<span>Texte 1</span>
<span>Texte 2</span>
<script>
  let spans = document.querySelectorAll('span');

  // La m√©thode forEach permet de boucler sur chaque √©l√©ment de la NodeList :
  spans.forEach(function(el) {
    console.log(el.textContent);
  });

  // OU version courte avec une fonction fl√®che :
  // spans.forEach(el => console.log(el.textContent));
</script>
```

#### ‚òù D√©finition : `forEach()`
- `forEach()` est une **m√©thode** utilis√©e pour **parcourir chaque √©l√©ment** d'un tableau ou d'une NodeList.
- Elle prend en param√®tre une fonction qui sera appel√©e pour **chaque √©l√©ment**.

#### Exemple simple :
```js
let nombres = [1, 2, 3];
nombres.forEach(function(nombre) {
  console.log(nombre);
});
```

---

### 4. `document.getElementsByClassName()`
Renvoie une **HTMLCollection** de tous les √©l√©ments ayant un nom de classe donn√©.

#### Syntaxe :
```js
let elements = document.getElementsByClassName('ma-classe');
```

#### Exemple :
```html
<!-- index.html -->
<div class="ma-classe">El√©ment A</div>
<div class="ma-classe">El√©ment B</div>
<script>
  let divs = document.getElementsByClassName('ma-classe');

  // divs[0] acc√®de au **premier √©l√©ment** dans la collection.
  // textContent permet de lire le texte √† l'int√©rieur de la balise.

  console.log(divs[0].textContent); // Affiche: El√©ment A
</script>
```

#### üîπ D√©composition de `divs[0].textContent`
- `divs` est une **HTMLCollection** (comme un tableau).
- `divs[0]` acc√®de au **premier √©l√©ment** de cette collection.
- `.textContent` permet de **lire ou modifier le texte** contenu dans cet √©l√©ment HTML.

#### Exemple plus visuel :
```js
let div = divs[0];
console.log(div);             // Affiche la balise <div>El√©ment A</div>
console.log(div.textContent); // Affiche: El√©ment A
```

### 5. `document.getElementsByTagName()`
Renvoie une **HTMLCollection** de tous les √©l√©ments avec le nom de balise sp√©cifi√©.

#### Syntaxe :
```js
let elements = document.getElementsByTagName('div');
```

#### Exemple :
```html
<!-- index.html -->
<div>Bloc 1</div>
<div>Bloc 2</div>
<script>
  let blocs = document.getElementsByTagName('div');
  console.log(blocs.length); // Affiche: 2
</script>
```

---

## üõ†Ô∏è Partie 3 : Manipuler les √©l√©ments du DOM

### 1. Modifier le contenu : `textContent` et `innerHTML`

#### üß† D√©finition :
- `textContent` : Modifie ou lit **le texte** √† l‚Äôint√©rieur d‚Äôun √©l√©ment HTML.
- `innerHTML` : Modifie ou lit **le HTML complet** √† l‚Äôint√©rieur d‚Äôun √©l√©ment (y compris les balises).

#### ‚úèÔ∏è Exemple :
```html
<!-- index.html -->
<h2 id="titre">Bonjour</h2>
<div id="contenu">Texte simple</div>

<script>
  document.getElementById('titre').textContent = 'Bienvenue sur mon site';
  document.getElementById('contenu').innerHTML = '<strong>Contenu important</strong>';
</script>
```

### 2. Cr√©er et ajouter des √©l√©ments dynamiquement

#### üß† Mots-cl√©s :
- `createElement('balise')` : cr√©e un nouvel √©l√©ment HTML (non encore affich√©).
- `appendChild(element)` : ajoute un enfant √† un √©l√©ment du DOM.

#### ‚úèÔ∏è Exemple :
```html
<!-- index.html -->
<ul id="liste"></ul>

<script>
  let nouvelItem = document.createElement('li');
  nouvelItem.textContent = 'Item ajout√© dynamiquement';
  document.getElementById('liste').appendChild(nouvelItem);
</script>
```

### 3. Supprimer un √©l√©ment

#### üß† Mots-cl√©s :
- `removeChild(element)` : supprime un enfant d‚Äôun √©l√©ment.
- `element.remove()` : supprime l‚Äô√©l√©ment directement.

#### ‚úèÔ∏è Exemple :
```html
<!-- index.html -->
<div id="zone">
  <p id="a-supprimer">Ce texte sera supprim√©</p>
</div>

<script>
  let parent = document.getElementById('zone');
  let enfant = document.getElementById('a-supprimer');
  parent.removeChild(enfant);
  // OU : document.getElementById('a-supprimer').remove();
</script>
```

### 4. G√©rer les √©v√©nements : `addEventListener`

#### üß† D√©finition :
`addEventListener('type', fonction)` permet de **r√©agir √† une action de l‚Äôutilisateur** (clic, survol, saisie...).

#### ‚úèÔ∏è Exemple :
```html
<!-- index.html -->
<button id="btn">Clique-moi</button>

<script>
  document.getElementById('btn').addEventListener('click', function() {
    alert('Tu as cliqu√© sur le bouton !');
  });
</script>
```

### 5. Lire les valeurs d‚Äôun formulaire

#### üß† Contexte :
Les formulaires permettent √† l‚Äôutilisateur d‚Äôentrer des donn√©es. En JavaScript, on peut lire ces valeurs et les utiliser dynamiquement.

#### ‚úèÔ∏è Exemple :
```html
<!-- index.html -->
<form id="mon-form">
  <input type="text" id="nom" placeholder="Entre ton nom">
  <button type="submit">Envoyer</button>
</form>

<script>
  document.getElementById('mon-form').addEventListener('submit', function(e) {
    e.preventDefault();
    let nom = document.getElementById('nom').value;
    alert('Bonjour ' + nom);
  });
</script>
```

---

## üéì Projet final DOM : Mini panier interactif (HTML + JS)
√† suivre...






---

# üõí Projet Pratique : Panier Interactif avec JavaScript

## üéØ Objectif p√©dagogique

Apprendre √† :
- S√©lectionner des √©l√©ments HTML avec JavaScript
- Modifier dynamiquement du contenu (`textContent`, `innerHTML`)
- G√©rer des √©v√©nements (`onclick`, `addEventListener`)
- Cr√©er une interaction de type panier (afficher, ajouter, vider)
- Manipuler le `style.display`
- Travailler avec des tableaux pour g√©rer les donn√©es du panier

---

## üîß √âtape 1 : Description du projet

On va cr√©er une petite page web avec :
- Une **barre de navigation**
- Des **produits affich√©s**
- Un **panier en haut √† droite**
- La possibilit√© d‚Äô**ajouter un produit au panier**
- Voir le contenu du panier
- **Vider le panier**

---

## üß± √âtape 2 : Structure HTML de base

```html
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Panier Interactif</title>
  <link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css" />
  <style>
    /* Styles pour que l‚Äô√©l√®ve voie bien l‚Äôimpact de JS */
  </style>
</head>
<body>
  <!-- Barre de navigation -->
  <nav>
    <ul>
      <li>Accueil</li>
      <li>√Ä propos</li>
      <li>Nos Produits</li>
      <li>Contact</li>
    </ul>
    <div id="panier-icon" onclick="afficherPanier()">
      <i class="las la-shopping-cart"></i>
      <span id="nombre-articles">0</span>
    </div>
  </nav>

  <!-- Liste des produits -->
  <section id="produits">
    <div class="produit">
      <img src="image1.jpg">
      <h3>Produit 1</h3>
      <button onclick="ajouterAuPanier('Produit 1')">Ajouter au panier</button>
    </div>
    <!-- 2 autres produits identiques -->
  </section>

  <!-- Contenu du panier (au d√©part cach√©) -->
  <div id="contenu-panier" style="display: none;">
    <h2>Contenu du Panier</h2>
    <ul id="liste-panier"></ul>
    <button onclick="viderPanier()">Vider le panier</button>
  </div>

  <script>
    // Partie JS ici ‚¨áÔ∏è
  </script>
</body>
</html>
```

---

## üí° √âtape 3 : JavaScript expliqu√© ligne par ligne

### Variables de d√©part :
```js
let panier = [];
let listePanier = document.getElementById("liste-panier");
let compteur = document.getElementById("nombre-articles");
let panneauPanier = document.getElementById("contenu-panier");
```

- `panier = []` ‚Üí tableau vide pour stocker les produits
- `getElementById()` ‚Üí s√©lectionne l‚Äô√©l√©ment pour l‚Äôutiliser ensuite

### Ajouter un produit :
```js
function ajouterAuPanier(nomProduit) {
  panier.push(nomProduit); // ajoute dans le tableau
  compteur.textContent = panier.length; // met √† jour le nombre affich√©
  mettreAJourPanier();
}
```

- `push()` ‚Üí ajoute un √©l√©ment √† la fin du tableau
- `textContent` ‚Üí modifie le texte visible √† l‚Äô√©cran

### Afficher le panier :
```js
function afficherPanier() {
  panneauPanier.style.display = panneauPanier.style.display === "none" ? "block" : "none";
}
```

- `style.display` ‚Üí change l'affichage CSS de l'√©l√©ment
- Le `?` est un op√©rateur conditionnel :
  - si `none` ‚Üí on l‚Äôaffiche
  - sinon ‚Üí on le cache

### Mise √† jour du panier :
```js
function mettreAJourPanier() {
  listePanier.innerHTML = "";
  panier.forEach(function(produit) {
    let li = document.createElement("li");
    li.textContent = produit;
    listePanier.appendChild(li);
  });
}
```

- `innerHTML = ""` ‚Üí on vide la liste actuelle
- `forEach()` ‚Üí on parcourt chaque √©l√©ment du panier
- `createElement("li")` ‚Üí on cr√©e un nouvel √©l√©ment HTML
- `appendChild()` ‚Üí on ajoute cet √©l√©ment dans la liste

### Vider le panier :
```js
function viderPanier() {
  panier = [];
  compteur.textContent = "0";
  mettreAJourPanier();
}
```

- On vide le tableau et remet tout √† 0

---

## üìö Partie 4 : Explication de chaque concept JS utilis√©

| Syntaxe | Signification | Exemple dans le projet |
|--------|----------------|------------------------|
| `onclick="fonction()"` | D√©clenche une action quand on clique | Ajouter au panier, vider |
| `element.textContent` | Lire ou √©crire le **texte brut** d‚Äôun √©l√©ment | `compteur.textContent = panier.length;` |
| `element.innerHTML` | Lire ou √©crire du HTML (balises) | Vide la liste `<ul>` pour la mettre √† jour |
| `createElement("li")` | Cr√©e dynamiquement un √©l√©ment HTML | Cr√©er un nouveau produit dans la liste |
| `appendChild()` | Ajoute un √©l√©ment enfant dans un autre | Ajouter `<li>` dans `<ul>` |
| `style.display` | Contr√¥le l'affichage (visible ou non) | Cacher ou montrer le panier |
| `push()` | Ajoute un √©l√©ment dans un tableau | `panier.push(nomProduit)` |
| `forEach()` | Boucle sur tous les √©l√©ments d‚Äôun tableau | `panier.forEach(...)` |

---

## üßæ Partie 5 : R√©capitulatif DOM et √©v√©nements √† conna√Ætre

| Cat√©gorie | M√©thodes ou concepts | Exemple |
|----------|----------------------|---------|
| S√©lection | `getElementById` | `document.getElementById("monId")` |
| S√©lection | `querySelector` | `document.querySelector(".btn")` |
| Cr√©ation | `createElement()` | `document.createElement("div")` |
| Insertion | `appendChild()` | `div.appendChild(p)` |
| Suppression | `removeChild()` | `parent.removeChild(child)` |
| √âv√©nement | `onclick` | `<button onclick="go()">` |
| √âv√©nement | `addEventListener` | `el.addEventListener("click", fct)` |
| Style | `element.style.display` | Cacher/afficher avec JS |
| Texte | `textContent`, `innerHTML` | Lire ou modifier contenu |
| Tableau | `push()`, `forEach()` | Ajouter/boucler |

---

